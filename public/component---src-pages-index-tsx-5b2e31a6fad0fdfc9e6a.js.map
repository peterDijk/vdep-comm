{"version":3,"sources":["webpack:///./src/pages/index.tsx","webpack:///./src/lib/LanguageStateProvider.tsx","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/seo.tsx","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./src/lib/Providers.tsx","webpack:///./src/styles/constants.ts","webpack:///./src/components/Header.tsx","webpack:///./src/styles/styled-components.ts","webpack:///./src/styles/Main.ts","webpack:///./src/components/layout.tsx"],"names":["queryName","IndexPage","_ref","data","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","_components_layout__WEBPACK_IMPORTED_MODULE_3__","_lib_LanguageStateProvider__WEBPACK_IMPORTED_MODULE_2__","_ref2","language","article","drupal","nodeQuery","entities","entityTranslations","find","lang","langcode","value","Fragment","_components_seo__WEBPACK_IMPORTED_MODULE_4__","title","keywords","description","body","Ctx","React","LanguageState","Consumer","Provider","LanguageStateProvider","_React$Component","props","_this","call","this","setLanguage","setState","state","availableLanguages","_babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_0___default","prototype","render","console","log","react__WEBPACK_IMPORTED_MODULE_1__","children","m","module","exports","require","default","ProdPageRenderer","location","pageResources","loader","getResourcesForPathnameSync","pathname","InternalPageRenderer","Object","assign","json","propTypes","PropTypes","shape","string","isRequired","SEO","site","meta","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","siteMetadata","defaultProps","array","arrayOf","StaticQueryContext","createContext","StaticQuery","react_default","staticQueryData","query","object","func","react","COLOR","Header","siteTitle","style","background","marginBottom","margin","maxWidth","padding","gatsby_link_default","to","color","textDecoration","onClick","styled","styledComponents","StyledContainer","div","_templateObject","Layout","Providers_Provider","gatsby_browser_entry_StaticQuery","components_Header","paddingTop","_2994927498","node"],"mappings":"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","file":"component---src-pages-index-tsx-5b2e31a6fad0fdfc9e6a.js","sourcesContent":["import React from \"react\";\nimport { Link, StaticQuery, graphql } from \"gatsby\";\nimport { ThemeProvider } from \"styled-components\";\nimport { LanguageState } from \"../lib/LanguageStateProvider\";\nimport Layout from \"../components/layout\";\nimport Image from \"../components/image\";\nimport SEO from \"../components/seo\";\n\nconst IndexPage = ({ data }) => {\n  return (\n    <Layout>\n      <LanguageState>\n        {({ language }) => {\n          const article = data.drupal.nodeQuery.entities[0].entityTranslations.find(\n            lang => lang.langcode.value === language\n          );\n          return (\n            <React.Fragment>\n              <SEO\n                title=\"Home\"\n                keywords={[`gatsby`, `application`, `react`]}\n                description=\"omschrijving\"\n              />\n              <h1>{article.title}</h1>\n              <h2>{article.body.value}</h2>\n            </React.Fragment>\n          );\n        }}\n      </LanguageState>\n    </Layout>\n  );\n};\n\nexport const queryName = graphql`\n  query {\n    drupal {\n      nodeQuery {\n        entities {\n          entityTranslations {\n            ... on DRUPAL_NodeArticle {\n              uuid\n              langcode {\n                value\n                language {\n                  name\n                }\n              }\n              title\n              body {\n                value\n                format\n                processed\n                summary\n                summaryProcessed\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default IndexPage;\n","import * as React from \"react\";\n\ntype ProviderProps = {\n  language: string;\n  availableLanguages: string[];\n  setLanguage: (language: string) => void;\n};\n\ntype State = {\n  language: string;\n  availableLanguages: string[];\n};\n\nconst Ctx = React.createContext({} as ProviderProps);\n\nexport const LanguageState = Ctx.Consumer;\nconst Provider = Ctx.Provider;\n\nexport class LanguageStateProvider extends React.Component<{}, State> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      language: \"nl\",\n      availableLanguages: [\"nl\", \"en\"],\n    };\n  }\n\n  setLanguage = (language: string) => {\n    this.setState({\n      language,\n    });\n  };\n\n  render() {\n    console.log({ language: this.state.language });\n    return (\n      <Provider\n        value={{\n          language: this.state.language,\n          setLanguage: this.setLanguage,\n          availableLanguages: this.state.availableLanguages,\n        }}\n      >\n        {this.props.children}\n      </Provider>\n    );\n  }\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  if (!pageResources) {\n    return null\n  }\n\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Helmet from \"react-helmet\";\nimport { useStaticQuery, graphql } from \"gatsby\";\n\nfunction SEO({ description, lang, meta, keywords, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  );\n\n  const metaDescription = description || site.siteMetadata.description;\n\n  return null;\n  // <Helmet\n  //   htmlAttributes={{\n  //     lang,\n  //   }}\n  //   title={title}\n  //   titleTemplate={`%s | ${site.siteMetadata.title}`}\n  //   meta={[\n  //     {\n  //       name: `description`,\n  //       content: metaDescription,\n  //     },\n  //     {\n  //       property: `og:title`,\n  //       content: title,\n  //     },\n  //     {\n  //       property: `og:description`,\n  //       content: metaDescription,\n  //     },\n  //     {\n  //       property: `og:type`,\n  //       content: `website`,\n  //     },\n  //     {\n  //       name: `twitter:card`,\n  //       content: `summary`,\n  //     },\n  //     {\n  //       name: `twitter:creator`,\n  //       content: site.siteMetadata.author,\n  //     },\n  //     {\n  //       name: `twitter:title`,\n  //       content: title,\n  //     },\n  //     {\n  //       name: `twitter:description`,\n  //       content: metaDescription,\n  //     },\n  //   ]\n  //     .concat(\n  //       keywords.length > 0\n  //         ? {\n  //             name: `keywords`,\n  //             content: keywords.join(`, `),\n  //           }\n  //         : []\n  //     )\n  //     .concat(meta)}\n  // />\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  keywords: [],\n};\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.array,\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n};\n\nexport default SEO;\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away,. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n.` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","import * as React from \"react\";\nimport { LanguageStateProvider } from \"./LanguageStateProvider\";\n\nexport const Provider: React.SFC = ({ children }) => (\n  <LanguageStateProvider>{children}</LanguageStateProvider>\n);\n","const BLACK = \"#000\";\nconst WHITE = \"#fff\";\nconst RICHBLACK = \"#002233\";\nconst RICHBLACK_RBG = \"0,34,51\";\nconst VDEP_BLUE = \"#00AEED\";\nconst VDEP_SECONDARY_BLUE = \"0183B7\";\nconst VDEP_GREEN = \"7CC04E\";\n\nexport const COLOR = {\n  BLACK,\n  WHITE,\n  RICHBLACK,\n  RICHBLACK_RBG,\n  VDEP_BLUE,\n  VDEP_SECONDARY_BLUE,\n  VDEP_GREEN,\n  RICHBLACK_80: `rgba(${RICHBLACK_RBG},.8)`,\n};\n\nexport const STYLES = {\n  FONT_FAMILY: `'Source Sans Pro',sans-serif`,\n  MARGIN: 24,\n  HEADER_HEIGHT: 130,\n  TITLES_HEIGHT: 60,\n  ITEM_MODULE_HEIGHT: 65,\n  ITEM_GROUP_HEIGHT: 50,\n  ITEM_HEIGHT: 50,\n  LIST_ITEM_HEIGHT: 70,\n  LIST_ITEM_GROUP_HEIGHT: 30,\n  BOTTOM_BAR_HEIGHT: 90,\n\n  COLOR_ERROR: \"#F4562B\",\n  COLOR_OK: \"#74d200\",\n  COLOR_BORDER: \"rgba(0, 34, 51, 0.10)\",\n\n  COLOR_TITLE: \"rgba(0, 34, 51, 0.80)\",\n  COLOR_GREY_TEXT: \"rgba(0, 34, 51, 0.5)\",\n  COLOR_GREY_TEXT_HOVER: \"rgba(0, 34, 51, 0.80)\",\n  COLOR_GREY_TEXT_INPUT: \"rgba(0, 34, 51, 0.80)\",\n\n  COLOR_BACKGROUND: \"#fff\",\n  COLOR_BACKGROUND_DARK: \"rgba(0, 34, 51, 0.80)\",\n\n  COLOR_INPUT_PLACEHOLDER: \"rgba(0, 34, 51, 0.30)\",\n  COLOR_INPUT_BORDER_FOCUS: \"rgba(0, 34, 51, 0.25)\",\n  COLOR_INPUT_ICON: \"rgba(0, 34, 51, 0.30)\",\n  COLOR_INPUT_ICON_FOCUS: \"rgba(0, 34, 51, 0.50)\",\n};\n","import { Link } from \"gatsby\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\n\nimport { LanguageState } from \"../lib/LanguageStateProvider\";\n\nimport { COLOR } from \"../styles/constants\";\n\nconst Header = ({ siteTitle }) => (\n  <header\n    style={{\n      background: COLOR.VDEP_BLUE,\n      marginBottom: `1.45rem`,\n    }}\n  >\n    <div\n      style={{\n        margin: `0 auto`,\n        maxWidth: 960,\n        padding: `1.45rem 1.0875rem`,\n      }}\n    >\n      <h1 style={{ margin: 0 }}>\n        <Link\n          to=\"/\"\n          style={{\n            color: COLOR.WHITE,\n            textDecoration: `none`,\n          }}\n        >\n          {siteTitle}\n        </Link>\n      </h1>\n      <LanguageState>\n        {({ availableLanguages, language, setLanguage }) => (\n          <div>\n            <span onClick={() => setLanguage(\"nl\")}>NL</span>\n            &nbsp;/&nbsp;\n            <span onClick={() => setLanguage(\"en\")}>EN</span>\n          </div>\n        )}\n      </LanguageState>\n    </div>\n    <Link to=\"/\">index</Link>\n    <Link to=\"/page-2\">page-2</Link>\n  </header>\n);\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n};\n\nHeader.defaultProps = {\n  siteTitle: ``,\n};\n\nexport default Header;\n","import * as styledComponents from \"styled-components\";\n\nimport ThemeInterface from \"./theme\";\n\nconst {\n  default: styled,\n  css,\n  // @ts-ignore\n  // injectGlobal,\n  keyframes,\n  ThemeProvider,\n} = styledComponents;\n\nexport { css, keyframes, ThemeProvider };\nexport default styled;\n","import styled from \"./styled-components\";\n\nimport { COLOR, STYLES } from \"./constants\";\n\ninterface Props {\n  headerHeight: number;\n}\n\nexport const StyledContainer = styled.div`\n  box-sizing: border-box;\n  width: 100%;\n  background: ${COLOR.WHITE};\n`;\n","/**\n * Layout component that queries for data\n * with Gatsby's StaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/static-query/\n */\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { StaticQuery, graphql } from \"gatsby\";\n\nimport { Provider } from \"../lib/Providers\";\n\nimport Header from \"./Header\";\nimport \"./layout.css\";\n\nimport { StyledContainer } from \"../styles/Main\";\n\nconst Layout = ({ children }) => (\n  <Provider>\n    <StaticQuery\n      query={graphql`\n        query SiteTitleQuery {\n          site {\n            siteMetadata {\n              title\n            }\n          }\n        }\n      `}\n      render={data => (\n        <StyledContainer>\n          <Header siteTitle={data.site.siteMetadata.title} />\n          <div\n            style={{\n              margin: `0 auto`,\n              maxWidth: 960,\n              padding: `0px 1.0875rem 1.45rem`,\n              paddingTop: 0,\n            }}\n          >\n            <main>{children}</main>\n            <footer />\n          </div>\n        </StyledContainer>\n      )}\n    />\n  </Provider>\n);\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Layout;\n"],"sourceRoot":""}